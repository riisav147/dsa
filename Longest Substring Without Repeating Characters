Given a string s, find the length of the longest 
substring
 without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.

------------------------------------*******-----------------------------------------------
Brute force approach :
using three for loop and checking each possible substring....time complexity will be O(n3);
after litle bit modification we can convert it to (On2);

Better Approach :

we take a set to store every character
HashSet<Character> set = new HashSet<>();
    int left = 0;
    int right = 0;
    int len=0;

    while(right<s.length()){
        if(set.contains(s.charAt(right))){
            set.remove(s.charAt(left));
            left++;
        }else{
            set.add(s.charAt(right));
            len = Math.max((right-left)+1,len);
            right++;

        }
        
    }
    return len;


Optimal Approach :
 HashMap<Character, Integer> map = new HashMap<>();
      int left=0;
      int right=0;
      int len = 0;
      while(right<s.length()){
          if(map.containsKey(s.charAt(right))){
              left = Math.max(map.get(s.charAt(right))+1,left);
          }
          map.put(s.charAt(right),right);
          len = Math.max(len, right-left+1);
          right++;
      }
      return len;
here we direct shift left next to repeating character and saves time;

















