Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.

----------------------------------*****************---------------------------------------------
class Solution {
    public List<List<Integer>> subsets(int[] nums) {

        List<List<Integer>> answer = new ArrayList<>();
        if(nums==null || nums.length==0) return answer;
        subsetusingRecurssion(nums,new ArrayList<Integer>(),0,answer);
        return answer;

    }
    public void subsetusingRecurssion(int[] nums, ArrayList<Integer>temp, int index,List<List<Integer>>answer){
      if(index>=nums.length){
          answer.add(new ArrayList<>(temp));
          return;
      }  
      temp.add(nums[index]);
      subsetusingRecurssion(nums, temp, index+1,answer);

      temp.remove(temp.size()-1);
      subsetusingRecurssion(nums, temp, index+1,answer);

    }


}
