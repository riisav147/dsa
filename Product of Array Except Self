Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]

--------------------------------**********----------------------------------
class Solution {
    public int[] productExceptSelf(int[] nums) {
       int[] suffix = new int[nums.length];
       int[] preffix = new int[nums.length];


        suffix[0]=1;
       for(int i=1;i<nums.length;i++){
           suffix[i] = suffix[i-1]*nums[i-1];
       }

       preffix[nums.length-1]=1;
       for(int i=nums.length-2;i>=0;i--){
           preffix[i]=preffix[i+1]*nums[i+1];
       }

       int[] answer = new int[nums.length];
       for(int i=0;i<nums.length;i++){
           answer[i]=preffix[i]*suffix[i];
       }

    return answer;
    }
}
