Given two strings s and t of lengths m and n respectively, return the minimum window 
substring
 of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

 

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.
Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.
 

Constraints:

m == s.length
n == t.length
1 <= m, n <= 105
s and t consist of uppercase and lowercase English letters.
 

Follow up: Could you find an algorithm that runs in O(m + n) time?

----------------------------------**********--------------------------

public class Solution {
    public String minWindow(String s, String t) {
        HashMap<Character, Integer> mp = new HashMap<>();
        int minLen = Integer.MAX_VALUE;
        int start = 0;
        
        for (char ch : t.toCharArray()) {
            mp.put(ch, mp.getOrDefault(ch, 0) + 1);
        }
        
        int i = 0, j = 0, count = mp.size();
        
        while (j < s.length()) {
            if (mp.containsKey(s.charAt(j))) {
                mp.put(s.charAt(j), mp.get(s.charAt(j)) - 1);
                if (mp.get(s.charAt(j)) == 0) {
                    count--;
                }
            }
            
            if (count == 0) {
                while (count == 0) {
                    if (mp.containsKey(s.charAt(i))) {
                        mp.put(s.charAt(i), mp.get(s.charAt(i)) + 1);
                        if (mp.get(s.charAt(i)) == 1) {
                            count++;
                            if (j - i + 1 < minLen) {
                                minLen = j - i + 1;
                                start = i;
                            }
                        }
                    }
                    i++;
                }
            }
            j++;
        }
        
        if (minLen == Integer.MAX_VALUE) return "";
        
        return s.substring(start, start + minLen);
    }
}
